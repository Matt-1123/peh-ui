/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CleanupsIndexRouteImport } from './routes/cleanups/index'
import { Route as CleanupsNewIndexRouteImport } from './routes/cleanups/new/index'
import { Route as CleanupsCleanupIdIndexRouteImport } from './routes/cleanups/$cleanupId/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CleanupsIndexRoute = CleanupsIndexRouteImport.update({
  id: '/cleanups/',
  path: '/cleanups/',
  getParentRoute: () => rootRouteImport,
} as any)
const CleanupsNewIndexRoute = CleanupsNewIndexRouteImport.update({
  id: '/cleanups/new/',
  path: '/cleanups/new/',
  getParentRoute: () => rootRouteImport,
} as any)
const CleanupsCleanupIdIndexRoute = CleanupsCleanupIdIndexRouteImport.update({
  id: '/cleanups/$cleanupId/',
  path: '/cleanups/$cleanupId/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cleanups': typeof CleanupsIndexRoute
  '/cleanups/$cleanupId': typeof CleanupsCleanupIdIndexRoute
  '/cleanups/new': typeof CleanupsNewIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cleanups': typeof CleanupsIndexRoute
  '/cleanups/$cleanupId': typeof CleanupsCleanupIdIndexRoute
  '/cleanups/new': typeof CleanupsNewIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cleanups/': typeof CleanupsIndexRoute
  '/cleanups/$cleanupId/': typeof CleanupsCleanupIdIndexRoute
  '/cleanups/new/': typeof CleanupsNewIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/cleanups' | '/cleanups/$cleanupId' | '/cleanups/new'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/cleanups' | '/cleanups/$cleanupId' | '/cleanups/new'
  id:
    | '__root__'
    | '/'
    | '/cleanups/'
    | '/cleanups/$cleanupId/'
    | '/cleanups/new/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CleanupsIndexRoute: typeof CleanupsIndexRoute
  CleanupsCleanupIdIndexRoute: typeof CleanupsCleanupIdIndexRoute
  CleanupsNewIndexRoute: typeof CleanupsNewIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cleanups/': {
      id: '/cleanups/'
      path: '/cleanups'
      fullPath: '/cleanups'
      preLoaderRoute: typeof CleanupsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cleanups/new/': {
      id: '/cleanups/new/'
      path: '/cleanups/new'
      fullPath: '/cleanups/new'
      preLoaderRoute: typeof CleanupsNewIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cleanups/$cleanupId/': {
      id: '/cleanups/$cleanupId/'
      path: '/cleanups/$cleanupId'
      fullPath: '/cleanups/$cleanupId'
      preLoaderRoute: typeof CleanupsCleanupIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CleanupsIndexRoute: CleanupsIndexRoute,
  CleanupsCleanupIdIndexRoute: CleanupsCleanupIdIndexRoute,
  CleanupsNewIndexRoute: CleanupsNewIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
